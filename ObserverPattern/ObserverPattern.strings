/* 
  ObserverPattern.strings
  DesignPatterns

  Created by 刘永杰 on 2018/12/3.
  Copyright © 2018 刘永杰. All rights reserved.
 
 
 观察者模式 -- 行为型模式
 
 1. 在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。
 2. 观察者模式完美的将观察者和被观察的对象分离开。举个例子，用户界面可以作为一个观察者，业务数据是被观察者，用户界面观察业务数据的变化，发现数据变化后，就显示在界面上。面向对象设计的一个原则是：系统中的每个类将重点放在某一个功能上，而不是其他方面。一个对象只做一件事情，并且将他做好。观察者模式在模块之间划定了清晰的界限，提高了应用程序的可维护性和重用性。
 3. 观察者设计模式定义了对象间的一种一对多的组合关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。
 
 1. 封装变化：在观察者模式中，会改变的是主题的状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题。这就叫提前规划。
 2. 针对接口编程：主题与观察者都使用接口，观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样可以让两者之间运作正常，又同时具有松耦合的优点。
 3. 多用组合：观察者模式利用“组合”将许多观察者组合进主题中。对象之间的这种关系不是通过继承产生，而是在运行时利用组合的方式而产生的。
 
 
*/
