/* 
  File.strings
  DesignPatterns

  Created by 刘永杰 on 2018/12/3.
  Copyright © 2018 刘永杰. All rights reserved.
 
 基础
 
 1.抽象
 2.封装
 3.多态
 4.继承
 
 
 设计原则
 
 1. 封装变化：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起
 2. 针对接口编程，而不是针对实现编程（针对超类编程）
 3. 多用组合，少用继承 （两个类共同完成一件事情）
 
 4. 为交互对象之间的松耦合设计而努力
 
 5. 对扩展开放，对修改关闭
 
 6. 依赖倒置原则：要依赖抽象，不要依赖具体类。
    - 变量不可以持有具体类的引用。如果使用new，就会持有具体类的引用，你可以改用工厂来避开这样的做法
    - 不要让类派生自具体类。如果派生自具体类，你就会依赖具体类，请派生自一个抽象（接口或抽象类）
    - 不要覆盖基类中已实现的方法。如果覆盖了基类已实现的方法，那么你的基类就不是一个真正适合被继承的抽象。基类中已实现的方法，应该由所有子类共享
 
 7. 最少知识原则：只和你的密友谈话
    - 减少对象之间的交互，只留下几个”密友“
    - 不要让太多的类耦合在一起，免得修改系统中的一部分，会影响到其他部分。
    - 如果许多类之间相互依赖，那么这个系统就会变成一个易碎的系统，他需要花许多成本维护，也会因为太复杂而不容易被其他人了解
 
 8. 好莱坞原则：别调用我们，我们会调用你
    - 在好莱坞原则下，我们允许底层组件将自己挂钩到系统上，但是高层组件会决定什么时候和怎样使用这些低层组件。换句话说，高层组件对待低层组件的方式是”别调用我们，我们会调用你“
    - 与依赖倒置的区别：依赖倒置原则教我们尽量避免使用具体类，而多使用抽象。好莱坞原则是用在创建框架或组件上的一种技巧，好让底层组件能够被挂钩进计算中，而且又不会让高层组件依赖底层组件。
    - 由超类控制一切，当它们需要的时候，自然会去调用子类，这就跟好莱坞一样
 
*/
